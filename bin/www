#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('../configuration');

var app = require('../app');
var debug = require('debug')('Event-Registration:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var models = require('../models');


var serverHttp = null;
var serverHttps = null;


if(config.listen.http.enabled) {
  var httpApp = app;
  if(config.listen.https.enabled && config.listen.https.only) {
    httpApp = function(req, res) {
      res.writeHead(302, {'Location': config.listen.https.url + req.url});
      res.end();
    };
  }
  serverHttp = http.createServer(httpApp);
  serverHttp.on('error', onError);
  serverHttp.on('listening', onListeningHttp);
}
if(config.listen.https.enabled) {
  var ssloptions = {
    cert: fs.readFileSync(config.listen.https.cert),
    key: fs.readFileSync(config.listen.https.key)
  };
  if(config.listen.https.ca) {
    ssloptions.ca = fs.readFileSync(config.listen.https.ca);
  }

  serverHttps = https.createServer(ssloptions, app);
  serverHttp.on('error', onError);
  serverHttp.on('listening', onListeningHttps);
}


function startListening() {
  if(config.listen.http.enabled) {
    serverHttp.listen(config.listen.http.port,
                      config.listen.http.listenip);
  }
  if(config.listen.https.enabled) {
    serverHttps.listen(config.listen.https.port,
                       config.listen.https.listenip);
  }
}

models.sequelize.sync().then(function () {
  startListening();
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHttp() {
  var addr = serverHttp.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onListeningHttps() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('HTTPS Listening on ' + bind);
}
